{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red140\green0\blue236;\red48\green101\blue47;
\red0\green0\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c62745\c12549\c94118;\cssrgb\c23529\c46275\c23922;
\cssrgb\c0\c0\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
clc;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 clear \cf3 all\cf2 ;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 close \cf3 all\cf2 ;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf4 % basis_pursuit\'a0 Solve basis pursuit via ADMM
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 %
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 % [x, history] = basis_pursuit(A, b, rho, alpha)
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 %
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 % Solves the following problem via ADMM:
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 %
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 %\'a0\'a0 minimize\'a0\'a0\'a0\'a0 ||x||_1
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 %\'a0\'a0 subject to\'a0\'a0 Ax = b
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 %
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 % The solution is returned in the vector x.
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf4 % rho is the augmented Lagrangian parameter.
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 rand(\cf3 'seed'\cf2 , 0);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 randn(\cf3 'seed'\cf2 , 0);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 n = 10;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 m = 6;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 A = randn(m,n);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 x = sprandn(n, 1, 0.1*n);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 b = A*x;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 xtrue = x;
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf4 %calling basis_pusuit function
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 [x z u r_norm s_norm g obj] = basis_pursuit(A, b, 1.0, 1.0)
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf4 % for printing\'a0 'x^(k+1)','z^(k+1)','u^(k+1)'
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 fprintf(\cf3 '%20s\\t%10s\\t%10s\\t \\n'\cf2 , \cf3 'x^(k+1)'\cf2 ,\cf3 'z^(k+1)'\cf2 ,\cf3 'u^(k+1)'\cf2 );
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf5 for\cf2  i =1:length(x)
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 fprintf(\cf3 '%20f\\t%10.4f\\t%10.4f\\t \\n'\cf2 , x(i),z(i),u(i));
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf5 end
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 figure
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf4 %plotting difference between current z and old z
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 subplot(2,1,1)
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 plot(1:g,r_norm)
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 ylabel(\cf3 '||r||_2'\cf2 ); xlabel(\cf3 'iter (k)'\cf2 );
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf4 %plotting difference between z and x
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 subplot(2,1,2)
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 plot(1:g,s_norm)
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 ylabel(\cf3 '||s||_2'\cf2 ); xlabel(\cf3 'iter (k)'\cf2 );
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 figure
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf4 %plotting norm with iteration
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 plot(1:g,obj)
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 ylabel(\cf3 'f(x^k) + g(z^k)'\cf2 ); xlabel(\cf3 'iter (k)'\cf2 );
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf5 function\cf2  [X_hat z u r_norm s_norm g obj] = basis_pursuit(A, b, rho, alpha)
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 MAX_ITER = 1000;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 [m n] = size(A);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 x = zeros(n,1);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 z = zeros(n,1);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 u = zeros(n,1);
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf5 for\cf2  k = 1:MAX_ITER
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \'a0\'a0\'a0 \cf4 %giving tolerance value 
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 RELTOL\'a0\'a0 = 1e-4;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 \cf4 % z-update with relaxation
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 zold = z; 
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 \cf4 % x-update
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 x = shrinkage(zold - u, 1/rho);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 X_hat = alpha*x +(1-alpha)*zold;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 z= (X_hat+ u) + pinv(A)*(b - A*(X_hat+u));
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 u = u + (X_hat - z);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0 \cf4 %norm of the difference between x and z
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 r_norm(k)\'a0 = norm(X_hat - z);
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 \cf4 %norm of the difference between zold and z
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 s_norm(k)\'a0 = norm(-rho*(z - zold));
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 \cf4 %norm of z
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 obj(k)=norm(z,1)
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 \cf4 %if the difference is less than tolerance,then it will break the loop
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 \cf5 if\cf2 (z-zold<RELTOL )
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 g=k
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf5 break\cf2 ;
\f1\fs29\fsmilli14667 \

\f0\fs26\fsmilli13333 \'a0\'a0\'a0\'a0 \cf5 end
\f1\fs29\fsmilli14667 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf5 end
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf5 function\cf2  y = shrinkage(a, kappa)
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \'a0\'a0\'a0 y = max(0, a-kappa) - max(0, -a-kappa);
\f1\fs29\fsmilli14667 \
\pard\pardeftab720\partightenfactor0

\f0\fs26\fsmilli13333 \cf5 end
\f1\fs29\fsmilli14667 \cf2 \

\f0\fs26\fsmilli13333 \cf5 end
\f1\fs29\fsmilli14667 \cf2 \
}